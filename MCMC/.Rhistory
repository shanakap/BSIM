max_<- max(x_) #vi_beta_mu[k] + 4* sqrt(vi_beta_var[k])
x<-seq(min_, max_ , 0.001)
y <- dnorm(x, mean = vi_beta_mu[k], sd =  sqrt(vi_beta_var[k]))
df_t <- data.frame(x,y, rep("VI",length(x)))
plt <- df %>% ggplot() +
geom_histogram(data = df, aes(x = Values, y = ..density..) , bins = 50,colour = "#deeefa", fill = "#377EB8", alpha=0.1)+
geom_density(aes(x = Values, colour = "MCMC"), show.legend = FALSE) +
geom_line(data = df_t, aes(x = x, y = y, colour = "VI")) +
geom_vline(aes(xintercept = opt_beta_mu[k,1],  colour = "True"), linetype = "dashed", show.legend = FALSE) +
scale_color_manual(name = "",values = cols) +
theme_bw() +
theme(legend.key = element_rect(fill = NA),
legend.background=element_rect(colour= NA),
legend.position = c(.8,.75),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),  text = element_text(size=20)) +xlab('')+ylab('')
print(plt)
i<-2
k<-1
cols <- c("VI"="#4DAF4A","MCMC"="#377EB8", "True" = "#E41A1C")
lines <- c("VI" = "solid","MCMC" = "solid", "True"  =  "dashed" )
beta = rstan::extract(fit1, pars='beta')$beta
x_ <- matrix(beta[,k])
colnames(x_) <- c("MCMC")
x <- as.tibble(x_)
df <- x %>%  pivot_longer(MCMC, names_to = "Variable", values_to = "Values")
min_<- min(x_) #vi_beta_mu[k] - 4* sqrt(vi_beta_var[k])
max_<- max(x_) #vi_beta_mu[k] + 4* sqrt(vi_beta_var[k])
x<-seq(min_, max_ , 0.001)
y <- dnorm(x, mean = vi_beta_mu[k], sd =  sqrt(vi_beta_var[k]))
df_t <- data.frame(x,y, rep("VI",length(x)))
plt <- df %>% ggplot() +
geom_histogram(data = df, aes(x = Values, y = ..density..) , bins = 50,colour = "#deeefa", fill = "#377EB8", alpha=0.1)+
geom_density(aes(x = Values, colour = "MCMC"), show.legend = FALSE) +
geom_line(data = df_t, aes(x = x, y = y, colour = "VI")) +
geom_vline(aes(xintercept = opt_beta_mu[k,1],  colour = "True"), linetype = "dashed", show.legend = FALSE) +
scale_color_manual(name = "",values = cols) +
theme_bw() +
theme(legend.key = element_rect(fill = NA),
legend.background=element_rect(colour= NA),
legend.position = c(.8,.75),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),  text = element_text(size=20)) +xlab('')+ylab('')
print(plt)
x <- seq(0,5, length=1000)
y <- dgamma(x, shape=1, rate = 1)
df_prior <- data.frame(x,y)
plt<- ggplot(df, aes(x=values)) + #, color=Method,  fill=Method
geom_line(data=df_prior, aes(x=x, y=y), color = '#FF7F00' ) +
theme_bw()+ theme(panel.grid.major = element_line(color = "white"), panel.grid.minor = element_line(color = "white")) +xlab('')+  ylab('Density')+
theme(text = element_text(size=20)) +xlab('')+ylab('')
png(paste0("prior_gamma.png"), width = 400, height = 350)
print(plt)
dev.off()
# Posterior
gamma_y = rstan::extract(fit1, pars='gamma_y')$gamma_y
x <- matrix(gamma_y)
colnames(x) <- c("MCMC")
x <- as.tibble(x)
df <- x %>%  pivot_longer(MCMC, names_to = "Variable", values_to = "Values")
x <- seq(min(gamma_y),max(gamma_y), length=1000)
y <- dgamma(x, shape=6.171587467,rate =  3.347250223)  # 6.274886, rate =  3.4451303 #shape=6.251847 , rate =  3.216673
df_t <- data.frame(x,y, rep("VI",length(x)))
plt<-df %>% ggplot() +
geom_histogram(data = df, aes(x = Values, y = ..density..) , bins = 50,colour = "#deeefa", fill = "#377EB8", alpha=0.1 )+
geom_density(aes(x = Values, colour = "MCMC"), show.legend = FALSE) +
geom_line(data = df_t, aes(x = x, y = y, colour = "VI")) +
geom_vline(aes(xintercept =  1/sigma_y_actual^2,  colour = "True"), linetype = "dashed", show.legend = FALSE) +
scale_color_manual(name = "",values = cols) +
theme_bw() +
theme(legend.key = element_rect(fill = NA),
legend.background=element_rect(colour=NA),
legend.position = c(.8,.75),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),  text = element_text(size=20)) +xlab('')+ylab('')
print(plt)
vi_lambda_mu <- c(0.156381577,0.38052091)  # c(0.16412221, 0.38258374) #c(-0.23507015, 0.48289555) #c(-0.01157279,0.5364137 )#(0.04878638, 0.5447931)
vi_lambda_var<- c(0.236194894, 0.112291269) # c(0.23496962, 0.11580787) # c(0.01950066, 0.01458727) #c(0.12149906,  0.05950498)#(  0.15705332,0.06570578)
for(k in seq(1,2)){
lambda_mu = rstan::extract(fit1, pars='lambda_mu')$lambda_mu
x_ <- matrix(lambda_mu[,k])
colnames(x_) <- c("MCMC")
x <- as.tibble(x_)
df <- x %>%  pivot_longer(MCMC, names_to = "Variable", values_to = "Values")
min_<- min(x_)  #vi_lambda_mu[k] - 4* sqrt(vi_lambda_var[k])
max_<- max(x_) #vi_lambda_mu[k] + 4* sqrt(vi_lambda_var[k])
x <- seq(min_,max_, length=1000)
y <- dnorm(x, mean = vi_lambda_mu[k], sd =  sqrt(vi_lambda_var[k]))
df_t <- data.frame(x,y)
plt <- df %>% ggplot() +
geom_histogram(data = df, aes(x = Values, y = ..density..) , bins = 50,colour = "#deeefa", fill = "#377EB8", alpha=0.1 )+
geom_density(aes(x = Values, colour = "MCMC"), show.legend = FALSE) +
geom_line(data = df_t, aes(x = x, y = y, colour = "VI")) +
geom_vline(aes(xintercept = opt_lambda_mu[k,1],  colour = "True"), linetype = "dashed", show.legend = FALSE) +
scale_color_manual(name = "",values = cols) +
theme_bw() +
theme(legend.key = element_rect(fill = NA),
legend.background=element_rect(colour=NA),
legend.position = c(.8,.75),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),  text = element_text(size=20)) +xlab('')+ylab('')
# png(paste0("lambda",k,"_3.png"), width =  400, height = 350)
print(plt)
# dev.off()
}
library(lme4)
library(rstan)
library(rstanarm)
library(ggplot2)
library(tidyverse)
library(bayesplot)
options(mc.cores = parallel::detectCores())
rstan_options(auto_write = TRUE)
### FOr loop response - lambda mu unknown Gamma inverse for sigma y
S = 10
N = 1000
truncate<-4
n_features = 2
source('/Users/shanakaperera/Documents/PhD/Consumption_GMM/Codes/STAN/R_new_model.R')
y_array
n_store_features = dim(store_features)[2]
# truncate<-2.5
# y = c(126.98026783, 64.99637415, 132.5653845 )
#
# truncate<-2.5
# y = c(59.49534162, 64.99637415, 113.30965826, 35.325209 ,116.41029364)
#
# truncate<-4.
# y = c(73.56498143, 107.58401646,182.39852072, 64.2622091  ,133.69335004)
# y = c(3.5466497, 1.7316988,  7.5933504, 9.347594,  5.875914, 3.0377555, 7.121104, 5.5269194, 2.085688 ,18.44601)
# mean(y)
# y = c(3.504629, 1.4731723, 7.5166645, 8.508018 , 5.3444543, 2.8277924, 7.3993425, 5.4748287, 2.086542, 18.65248)  # truncate<-1.5
# y = c( 58.81146757, 9.31295793, 75.51330817)
# y = c( 3.5466497, 1.7316988, 7.5933504, 9.347594, 5.875914, 3.0377555, 7.121104, 5.5269194, 2.085688, 18.44601)
# y =  c(3.4526865, 2.1251822, 7.1165733, 8.239958, 6.093188, 3.3395386, 7.047777, 6.1555557, 2.104154, 18.638071)
# y<-c(3.1856186, 2.162995, 4.2805376, 7.358833, 7.394919,  3.4315083, 7.310516,  6.539368,  1.7088963, 19.79605)
# y<-c( 1.7011157,0.6247182,1.3038278,2.8796668,2.9665735,2.754882 ,4.6034203,2.9323483,2.14962  ,11.2816305,4.2559934,4.9369464, 4.382115 ,
#       4.0242615,2.9313898,5.4344745,1.0153377,1.558393 ,3.463522 ,4.551919)
#
# y<-c(15.437974,	7.897745,	5.3613396,	7.8111877,	8.913622,	6.323203,	4.39268,	5.351637,	3.2922409,	1.6249691)
# # beta <- c(2,5)
# opt_lambda_mu <- c(0.1,0.2)
input_data <- list(S = S, N = N, n_features = n_features,n_store_features= n_store_features, features = features, store_features = store_features,
locations_N = locations_N,locations_S = locations_S, truncate = truncate, y=y_array)
model_code <- 'data {
int S;
int N; //number of rows
int n_features; //number of columns
int n_store_features;
matrix[N,n_features] features;
matrix[S,n_store_features] store_features;
matrix[N,2] locations_N;
matrix[S,2] locations_S;
real truncate;
real y[S];        // Total consumptions
}
parameters {
vector[n_store_features] lambda_mu;
vector[n_features] beta;
real<lower=0> gamma_beta;
real<lower=0> gamma_y;
}
transformed parameters {
vector[N] inputs_N1 = col(locations_N,1);
vector[N] inputs_N2 = col(locations_N,2);
vector[S] inputs_S1 = col(locations_S,1);
vector[S] inputs_S2 = col(locations_S,2);
vector[S] trunc_denom ;
vector[N] dist_sqrd;
vector[N] trunc_numerat;
vector[N] comparison;
matrix[N,S] pdf_all;
vector[N] pdf_evaluation_sum;
matrix[N,S] respons;
vector[S] y_hat;
vector[N] f_function = features*beta;
vector[S] tau_S =  exp(store_features* lambda_mu);
for (s in 1:S){
trunc_denom[s] = 2 * pi() * tau_S[s]  * (1- exp(-truncate^2 / (2*tau_S[s] ))) ;
dist_sqrd = square(inputs_N1 - inputs_S1[s])+ square(inputs_N2- inputs_S2[s]) ;
trunc_numerat = exp(-0.5/tau_S[s] * dist_sqrd);
for(n in 1:N){
comparison[n] = dist_sqrd[n]<truncate^2;
}
trunc_numerat = comparison  .* trunc_numerat;
pdf_all[,s] = trunc_numerat / trunc_denom[s];
}
for (n in 1:N){
pdf_evaluation_sum[n] = sum(row(pdf_all,n)) + 1e-10;
}
for (s in 1:S){
respons[,s] = col(pdf_all,s) ./ pdf_evaluation_sum;
}
for (s in 1:S){
y_hat[s] =  sum(f_function .* col(respons, s));
}
}
model {
target += gamma_lpdf(gamma_beta| 1,1);       // prior gamma beta log-density
target += normal_lpdf(beta| 0, 1/sqrt(gamma_beta));       // prior beta log-density
target += normal_lpdf(lambda_mu| 0, 1);       // prior lamda log-density
target += gamma_lpdf(gamma_y| 1,1);       // prior gammay y log-density
target += normal_lpdf(y | y_hat, 1/sqrt(gamma_y)); // log-likelihood
}'
# print(sum(lambda_mu))
ptm <- proc.time()
m<- stan_model(model_code = model_code ,verbose = FALSE)
#fit1 <- sampling(m,  data = input_data,chains = 1)
# fit1 <- sampling(m,  data = input_data, iter = 3000,warmup = 1500,thin = 1,chains = 4, algorithm = "HMC")
fit1 <- sampling(m,  data = input_data, iter = 5000,warmup = 2500,thin = 1,chains = 1) # algorithm = "HMC"
# print(fit1)
print(fit1, pars=c('beta', 'lambda_mu','gamma_y','gamma_beta'), digits=3, prob=c(.025,.5,.975))
vi_beta_mu <- c(-0.202691, 0.805628) #c(-0.19640481,0.39795792) # #c(-0.2057907,  0.40166998)  #c(-0.20513411, 0.40079415) #(-0.20520906, 0.40088147)
vi_beta_var<-c(0.00020823, 0.00034336) # c(0.00019275, 0.0003414) # # c(5.2977717e-05,   8.1790320e-05)#c(  0.0001867, 0.00028649) #(  0.00020563,0.00031172)
for (k in seq(1,2)){
cols <- c("VI"="#4DAF4A","MCMC"="#377EB8", "True" = "#E41A1C")
lines <- c("VI" = "solid","MCMC" = "solid", "True"  =  "dashed" )
beta = rstan::extract(fit1, pars='beta')$beta
x_ <- matrix(beta[,k])
colnames(x_) <- c("MCMC")
x <- as.tibble(x_)
df <- x %>%  pivot_longer(MCMC, names_to = "Variable", values_to = "Values")
min_<- min(x_) #vi_beta_mu[k] - 4* sqrt(vi_beta_var[k])
max_<- max(x_) #vi_beta_mu[k] + 4* sqrt(vi_beta_var[k])
x<-seq(min_, max_ , 0.001)
y <- dnorm(x, mean = vi_beta_mu[k], sd =  sqrt(vi_beta_var[k]))
df_t <- data.frame(x,y, rep("VI",length(x)))
plt <- df %>% ggplot() +
geom_histogram(data = df, aes(x = Values, y = ..density..) , bins = 50,colour = "#deeefa", fill = "#377EB8", alpha=0.1)+
geom_density(aes(x = Values, colour = "MCMC"), show.legend = FALSE) +
geom_line(data = df_t, aes(x = x, y = y, colour = "VI")) +
geom_vline(aes(xintercept = opt_beta_mu[k,1],  colour = "True"), linetype = "dashed", show.legend = FALSE) +
scale_color_manual(name = "",values = cols) +
theme_bw() +
theme(legend.key = element_rect(fill = NA),
legend.background=element_rect(colour= NA),
legend.position = c(.8,.75),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),  text = element_text(size=20)) +xlab('')+ylab('')
# png(paste0("beta",k,"_3.png"), width = 400, height = 350)
print(plt)
# dev.off()
}
gamma_y = rstan::extract(fit1, pars='gamma_y')$gamma_y
x <- matrix(gamma_y)
colnames(x) <- c("MCMC")
x <- as.tibble(x)
df <- x %>%  pivot_longer(MCMC, names_to = "Variable", values_to = "Values")
x <- seq(min(gamma_y),max(gamma_y), length=1000)
y <- dgamma(x, shape=6.2485185,rate =  3.5895298)  # 6.274886, rate =  3.4451303 #shape=6.251847 , rate =  3.216673
df_t <- data.frame(x,y, rep("VI",length(x)))
plt<-df %>% ggplot() +
geom_histogram(data = df, aes(x = Values, y = ..density..) , bins = 50,colour = "#deeefa", fill = "#377EB8", alpha=0.1 )+
geom_density(aes(x = Values, colour = "MCMC"), show.legend = FALSE) +
geom_line(data = df_t, aes(x = x, y = y, colour = "VI")) +
geom_vline(aes(xintercept =  1/sigma_y_actual^2,  colour = "True"), linetype = "dashed", show.legend = FALSE) +
scale_color_manual(name = "",values = cols) +
theme_bw() +
theme(legend.key = element_rect(fill = NA),
legend.background=element_rect(colour=NA),
legend.position = c(.8,.75),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),  text = element_text(size=20)) +xlab('')+ylab('')
# png(paste0("Gamma3.png"), width =  400, height = 350)
print(plt)
# dev.off()
vi_lambda_mu <- c(0.19708622,0.55407566)  # c(0.16412221, 0.38258374) #c(-0.23507015, 0.48289555) #c(-0.01157279,0.5364137 )#(0.04878638, 0.5447931)
vi_lambda_var<- c(0.04011181, 0.02439554) # c(0.23496962, 0.11580787) # c(0.01950066, 0.01458727) #c(0.12149906,  0.05950498)#(  0.15705332,0.06570578)
for(k in seq(1,2)){
lambda_mu = rstan::extract(fit1, pars='lambda_mu')$lambda_mu
x_ <- matrix(lambda_mu[,k])
colnames(x_) <- c("MCMC")
x <- as.tibble(x_)
df <- x %>%  pivot_longer(MCMC, names_to = "Variable", values_to = "Values")
min_<- min(x_)  #vi_lambda_mu[k] - 4* sqrt(vi_lambda_var[k])
max_<- max(x_) #vi_lambda_mu[k] + 4* sqrt(vi_lambda_var[k])
x <- seq(min_,max_, length=1000)
y <- dnorm(x, mean = vi_lambda_mu[k], sd =  sqrt(vi_lambda_var[k]))
df_t <- data.frame(x,y)
plt <- df %>% ggplot() +
geom_histogram(data = df, aes(x = Values, y = ..density..) , bins = 50,colour = "#deeefa", fill = "#377EB8", alpha=0.1 )+
geom_density(aes(x = Values, colour = "MCMC"), show.legend = FALSE) +
geom_line(data = df_t, aes(x = x, y = y, colour = "VI")) +
geom_vline(aes(xintercept = opt_lambda_mu[k,1],  colour = "True"), linetype = "dashed", show.legend = FALSE) +
scale_color_manual(name = "",values = cols) +
theme_bw() +
theme(legend.key = element_rect(fill = NA),
legend.background=element_rect(colour=NA),
legend.position = c(.8,.75),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),  text = element_text(size=20)) +xlab('')+ylab('')
# png(paste0("lambda",k,"_3.png"), width =  400, height = 350)
print(plt)
# dev.off()
}
data<-read.csv(file ='/Users/shanakaperera/Documents/PhD/Consumption_GMM/Codes/STAN/Data/data_50Stores_samples_v2.csv')
library(lme4)
library(rstan)
library(rstanarm)
library(ggplot2)
library(tidyverse)
library(bayesplot)
options(mc.cores = parallel::detectCores())
rstan_options(auto_write = TRUE)
### FOr loop response - lambda mu unknown Gamma inverse for sigma y
S = 50
N = 2000
truncate<-4
n_features = 2
source('/Users/shanakaperera/Documents/PhD/Consumption_GMM/Codes/STAN/R_new_model.R')
y_array
print(i)
for(i in seq(10,14)){
print(i)
}
set.seed(566899934)
MD sent Today at 2:02 PM
sample(letters[1:6], 3, replace = FALSE)
library(mcmc)
install.packages("mcmc")
set.seed(1)
# Simulated data
data0 = exp(rnorm(100))
# Log posterior
lp = function(par){
if(par[2]>0) return( sum(log(dlnorm(data0,par[1],par[2]))) - 2*log(par[2]))
else return(-Inf)
}
# Metropolis-Hastings
NMH = 260000
out = metrop(lp, scale = 0.175, initial = c(0.1,0.8), nbatch = NMH)
library(mcmc)
out = metrop(lp, scale = 0.175, initial = c(0.1,0.8), nbatch = NMH)
#Acceptance rate
out$acc
deltap = exp(  out$batch[,1][seq(10000,NMH,25)] + 0.5*(out$batch[,2][seq(10000,NMH,25)])^2  )
plot(density(deltap))
# 95% credibility interval
c(quantile(deltap,0.025),quantile(deltap,0.975))
library(lme4)
library(rstan)
library(rstanarm)
library(ggplot2)
library(tidyverse)
library(bayesplot)
options(mc.cores = parallel::detectCores())
rstan_options(auto_write = TRUE)
### FOr loop response - lambda mu unknown Gamma inverse for sigma y
S = 10
N = 1000
truncate<-4
source('Load_Data.R')
n_features = dim(features)[2]
n_store_features = dim(store_features)[2]
input_data <- list(S = S, N = N, n_features = n_features,n_store_features= n_store_features, features = features, store_features = store_features,
locations_N = locations_N,locations_S = locations_S, truncate = truncate, y=y_array)
setwd('/Users/shanakaperera/Documents/PhD/Consumption_GMM/BSIM_Complete/MCMC')
### FOr loop response - lambda mu unknown Gamma inverse for sigma y
S = 10
N = 1000
truncate<-4
source('Load_Data.R')
n_features = dim(features)[2]
n_store_features = dim(store_features)[2]
input_data <- list(S = S, N = N, n_features = n_features,n_store_features= n_store_features, features = features, store_features = store_features,
locations_N = locations_N,locations_S = locations_S, truncate = truncate, y=y_array)
model_code <- 'data {
int S;
int N; //number of rows
int n_features; //number of columns
int n_store_features;
matrix[N,n_features] features;
matrix[S,n_store_features] store_features;
matrix[N,2] locations_N;
matrix[S,2] locations_S;
real truncate;
real y[S];        // Total consumptions
}
parameters {
vector[n_store_features] lambda_mu;
vector[n_features] beta;
real<lower=0> gamma_beta;
real<lower=0> gamma_y;
}
transformed parameters {
vector[N] inputs_N1 = col(locations_N,1);
vector[N] inputs_N2 = col(locations_N,2);
vector[S] inputs_S1 = col(locations_S,1);
vector[S] inputs_S2 = col(locations_S,2);
vector[S] trunc_denom ;
vector[N] dist_sqrd;
vector[N] trunc_numerat;
vector[N] comparison;
matrix[N,S] pdf_all;
vector[N] pdf_evaluation_sum;
matrix[N,S] respons;
vector[S] y_hat;
vector[N] f_function = features*beta;
vector[S] tau_S =  exp(store_features* lambda_mu);
for (s in 1:S){
trunc_denom[s] = 2 * pi() * tau_S[s]  * (1- exp(-truncate^2 / (2*tau_S[s] ))) ;
dist_sqrd = square(inputs_N1 - inputs_S1[s])+ square(inputs_N2- inputs_S2[s]) ;
trunc_numerat = exp(-0.5/tau_S[s] * dist_sqrd);
for(n in 1:N){
comparison[n] = dist_sqrd[n]<truncate^2;
}
trunc_numerat = comparison  .* trunc_numerat;
pdf_all[,s] = trunc_numerat / trunc_denom[s];
}
for (n in 1:N){
pdf_evaluation_sum[n] = sum(row(pdf_all,n)) + 1e-10;
}
for (s in 1:S){
respons[,s] = col(pdf_all,s) ./ pdf_evaluation_sum;
}
for (s in 1:S){
y_hat[s] =  sum(f_function .* col(respons, s));
}
}
model {
target += gamma_lpdf(gamma_beta| 1,1);       // prior gamma beta log-density
target += normal_lpdf(beta| 0, 1/sqrt(gamma_beta));       // prior beta log-density
target += normal_lpdf(lambda_mu| 0, 1);       // prior lamda log-density
target += gamma_lpdf(gamma_y| 1,1);       // prior gammay y log-density
target += normal_lpdf(y | y_hat, 1/sqrt(gamma_y)); // log-likelihood
}'
ptm <- proc.time()
m<- stan_model(model_code = model_code ,verbose = FALSE)
fit1 <- sampling(m,  data = input_data, iter = 200,warmup = 100,thin = 5,chains = 4) # algorithm = "HMC"
proc.time() - ptm
###-- Plots for thesis
rstan::traceplot(fit1 ,pars=c('beta'), inc_warmup = TRUE)
plot(fit, plotfun = "rhat") + ggtitle("Example of adding title to plot")
plot(fit1, plotfun = "rhat") + ggtitle("Example of adding title to plot")
traceplot
rstan::rhat(fit1 ,pars=c('beta'), inc_warmup = TRUE)
rstan::traceplot(fit1 ,pars=c('rhat'), inc_warmup = TRUE)
stan_rhat(fit1)
str(stan_rhat(fit1))
stan_rhat(fit1)$y
stan_rhat(fit1)$data
str(stan_rhat(fit1))
Rhat(fit1)
fit1
str(fit1)
plot(fit1, plotfun = "rhat")
stan_rhat(fit1)
fit1
stan_rhat(fit1,pars=c('beta'))
str(stan_rhat(fit1))
str(fit1)
stan_rhat
rhat_neff_mcse_hist
rstan::rhat_neff_mcse_hist
rstan:::rhat_neff_mcse_hist
rstan:::.rhat_neff_mcse_hist
summary(fit1)$summary
else smry <- summary(object)$summary
smry <- summary(object)$summary
smry <- summary(fit1)$summary
xlab <- switch(which, rhat = "Rhat statistic", n_eff_ratio = "Effective sample size / Sample size",
mcse_ratio = "Monte Carlo SE / Posterior SD")
stat <- switch(which, rhat = smry[, "Rhat"], n_eff_ratio = smry[,"n_eff"]/SS, mcse_ratio = smry[, "se_mean"]/smry[, "sd"])
stat <- switch("Rhat", rhat = smry[, "Rhat"], n_eff_ratio = smry[,"n_eff"]/SS, mcse_ratio = smry[, "se_mean"]/smry[, "sd"])
df <- data.frame(stat)
View(df)
stat <- switch("rhat", rhat = smry[, "Rhat"], n_eff_ratio = smry[,"n_eff"]/SS, mcse_ratio = smry[, "se_mean"]/smry[, "sd"])
df <- data.frame(stat)
View(df)
base <- ggplot2::ggplot(df, ggplot2::aes(x = stat))
base + do.call(ggplot2::geom_histogram, dots)
base + do.call(ggplot2::geom_histogram)
base <- ggplot2::ggplot(df, ggplot2::aes(x = stat))
base
View(df)
stat <- switch("rhat", rhat = smry[, "Rhat"], n_eff_ratio = smry[,"n_eff"]/SS, mcse_ratio = smry[, "se_mean"]/smry[, "sd"])
df <- data.frame(stat)
hist(df)
hist(c(df))
hist(c(df$stat))
str(stan_rhat(fit1))
stan_rhat(fit1)
plot(df$stat))
plot(df$stat)
plot(df$stat,type = 'l')
View(df)
rownames(df)
df$par <- rownames(df)
df1 = df[df$par == 'beta[1]']
df1 = subset(df, df$par == 'beta[1]')
View(df1)
grep
?grep
grep('beta%', df$par )
grep('beta', df$par)
fit_summary <- summary(fit1)
all_sumry <- fit_summary$c_summary
all_sumry
beta_summary <- summary(fit, pars = c("beta"), probs = c(0.1, 0.9))$summary
beta_summary <- summary(fit1, pars = c("beta"), probs = c(0.1, 0.9))$summary
View(beta_summary)
beta_summary <- summary(fit1, pars = c("beta"), probs = c(0.1, 0.9))$c_summary
beta_summary
stan_rhat(fit1)
stat <- switch("rhat", rhat = smry[, "Rhat"], n_eff_ratio = smry[,"n_eff"]/SS, mcse_ratio = smry[, "se_mean"]/smry[, "sd"])
df <- data.frame(stat)
devtools::install_github("tylermorganwall/rayshader")
remove.packages("Rcpp")
install.packages("Rcpp")
library(rstan)
install.packages("Rcpp")
install.packages("Rcpp")
